<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <!-- 配置Spring监听器 -->
  
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- 指定加载Spring的核心配置文件 -->
 	
	  <context-param>
	  <param-name>contextConfigLocation</param-name>
	  <!-- 注意applicationContext*.xml 的含义 -->
	  <param-value>classpath:spring/applicationContext*.xml</param-value>
	  </context-param>
	  
	
  <!-- 编码过滤器，以UTF8编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 配置shiro的filter -->
	<filter>
		<!-- 这里注意：filter-name的名字要和Spring配置文件里，shiro的filter的bean的名字
		保持一致 -->
		<filter-name>shiroFilter</filter-name>
		<!-- 这个类的作用：根据spring配置文件里bean id的名字，来生成Filter的代理类 -->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- 这个属性名写死，他的默认值是false，代表生成的FilterProxy这个对象交给Spring
			来管理，所以如想Filter工作，需要交给Servlet容器来处理，所以需要把属性值改成true -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
  
  	<filter-mapping>
  		<filter-name>shiroFilter</filter-name>
  		<url-pattern>/*</url-pattern>
  	</filter-mapping>
	
  
  <!-- 配置SpringMVC核心入口类 -->
	<servlet>
	<servlet-name>smvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc-config.xml</param-value>
		</init-param>
		<!-- 如果想让servlet随容器启动而启动，可以用load-on-starup来配置
		如果是0，或0以上的数字，表示随容器启动而启动的。
		如果不配置，或者是负数，表示第一次被调用的时候工作的 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>smvc</servlet-name>
		<!-- 表示拦截处理所有请求,注意，这是个坑，如果配置/，静态资源文件
		也会被拦截，比如css,js，jpg等。 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
	<welcome-file>login.jsp</welcome-file>
	</welcome-file-list>
	
</web-app>
